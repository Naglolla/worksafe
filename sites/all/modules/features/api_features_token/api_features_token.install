<?php

function api_features_token_install(){
  api_features_token_enable();
}

/**
 * @file
 * Installation code for api_features_token feature
 */
function api_features_token_enable() {
  $uid = 1;
  
  $sku_base = 'API_TOKEN_PRODUCT';
  $sku = $sku_base;
  //check for a unique sku to use for the token product
  $i = 1;
  while (token_sku_exists($sku)) {
    $sku = $sku_base . "_$i";
    $i++;
  }
  
  // Create a Token Product
  $product = commerce_product_new('token');
  $product->sku = $sku;
  $product->title = 'Token product';
  $product->language = LANGUAGE_NONE;
  $product->uid = $uid;
  $product->commerce_price[LANGUAGE_NONE][0] = array(
    'amount' => 0, // in zero because the price is re-calculated when added from the token line item based on the value of "field_money_charged"
    'currency_code' => 'USD',
  );
  commerce_product_save($product);  
  
  
  //create an instance of token node type to be able to "buy" tokens
  // creating a new object $node and setting its 'type' and uid property
  $values = array(
    'type' => 'token',
    'uid' => $uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $entity);
  
  $wrapper->title->set('Buy/Reload token');
  $wrapper->field_product = array(intval($product->product_id));
  $wrapper->save();
  
  variable_set('token_node_nid', $wrapper->nid->value());
}

function token_sku_exists($sku) {
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_product');
  $query->entityCondition('bundle', 'token');
  $query->propertyCondition('sku', $sku, '=');

  $result = $query->execute();
  if (empty($result)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
  
}