<?php

/**
 * This file is empty by default because the base theme chain (Alpha & Omega) provides
 * all the basic functionality.
 */


function worksafe_process_region(&$vars) {
  global $language;
  $vars['lang'] = $language->language;
  if (in_array($vars['elements']['#region'], array('menu'))) {
    $theme = alpha_get_theme();
    $vars['logo'] = $theme->page['logo'];
    $vars['main_menu'] = $theme->page['main_menu'];
  }
}

function worksafe_preprocess_page(&$variables) {
  $arg = arg();
  // Add class to detect Help & FAQ page (through CSS).
  if ($arg['0'] == 'help-and-faq') {
   $variables['attributes_array']['class'][] = 'help-faq-page';
  }

  $status = drupal_get_http_header("status");
  if($status == '403 Forbidden') {
    $pattern = 'courses/*/*/*/*/*/*';
    $path = current_path();
    $path_alias = drupal_lookup_path('alias', $path);
    if (drupal_match_path($path, $pattern) || drupal_match_path($path_alias, $pattern)) {
      //$variables['theme_hook_suggestions'][] = 'page__403';
      $variables['page']['content']['content']['content']['system_main']['main']['#markup'] = '<h3 class="access_denied">' .t('Check your permissions or the course is expired.') . '</h3>';
    }
  }

  // Invoke content type specific hooks (HOOK_preprocess_page_node_TYPE)
  if (isset($variables['node'])) {
    $function = __FUNCTION__ . '_node_' . $variables['node']->type;
    if (function_exists($function)) {
      $function($variables, $hook);
    }
  }
}

/**
 *
 * Implements hook_preprocess_menu_link.
 * @param type $variables
 */
function worksafe_preprocess_menu_link(&$variables) {
  if ($variables['element']['#original_link']['menu_name'] == 'menu-api-main-menu') {
    $variables['element']['#title'] = t($variables['element']['#title']);
    if(isset($variables['element']['#attributes']['id'])) {
      switch ($variables['element']['#attributes']['id']) {
        case "header-token-link":
          $token_nid = variable_get('token_node_nid', '');
          if ($token_nid) {
            // URL Alias Path generated by Drupal.
            $variables['element']['#href'] = 'node/' . $token_nid;
          }
          break;
        case "header-help-link":
          $variables['element']['#href'] = 'help-and-faq';
          break;
        case "header-directory-link":
          $variables['element']['#href'] = 'directory/search';
          break;
      }
    }
  }
}


/**
 * Implements hook_preprocess_html().
 **/
function worksafe_preprocess_html(&$vars) {
  // Setup IE meta tag to force IE rendering mode
  $meta_ie_render_engine = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' =>  'IE=edge,chrome=1',
      'http-equiv' => 'X-UA-Compatible',
    )
  );
  // Add header meta tag for IE to head
  drupal_add_html_head($meta_ie_render_engine, 'meta_ie_render_engine');
 
  // Add favicon
  $favicon_path = drupal_get_path('theme', 'worksafe') . '/favicon.png';
  $favicon_url = file_create_url($favicon_path);
  drupal_add_html_head_link(array('rel' => 'shortcut icon', 'href' => drupal_strip_dangerous_protocols($favicon_url), 'type' => 'image/png'));
  
}

function commerce_kickstart_admin_html_head_alter(&$head_elements) { 
// Search the head elements for the Favicon 
  foreach($head_elements as $key => $element) { 
    if(!empty($element['#attributes'])) { 
      if(array_key_exists('href', $element['#attributes'])) { 
        if (strpos($element['#attributes']['href'], 'misc/favicon.ico') > 0) {
          // Change the URL 
          $head_elements[$key]['#attributes']['href'] = '/'.drupal_get_path('theme', 'worksafe').'/favicon.ico'; 
          // Or, delete the favicon link entirely 
          //unset($head_elements[$key]); 
        } 
      }
    }
  }
}

/**
 * Override or insert variables into the node templates.
 *
 * @param $variables
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("node" in this case.)
 */
function worksafe_preprocess_node(&$variables, $hook) {
  // Invoke content type specific hooks (HOOK_preprocess_node_TYPE)
  $function = __FUNCTION__ . '_' . $variables['node']->type;
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}

/**
 * Override or insert variables for company node.
 *
 * @param $variables
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("node" in this case.)
 */
function worksafe_preprocess_node_company(&$variables, $hook) {
  $variables['address_1'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'thoroughfare');
  $variables['address_2'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'premise');
  $variables['country'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'country');
  $variables['state'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'administrative_area');
  $variables['city'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'locality');
  $variables['province_region'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'province_region');
  $variables['zip'] = _api_custom_field_item('node', $variables['node'], 'field_address', 'postal_code');
  $variables['tel'] = _api_custom_field_item('node', $variables['node'], 'field_tel');

  // Replace State code.
  if (!empty($variables['state'])) {
    $states = _api_custom_get_us_states();
    if (!empty($states[$variables['state']])) {
      $variables['state'] = $states[$variables['state']];
    }
  }

  // Replace country code.
  if (!empty($variables['country'])) {
    $countries = _addressfield_country_options_list();
    if (!empty($countries[$variables['country']])) {
      $variables['country'] = $countries[$variables['country']];
    }
  }
  // Safety Keys block.
  $sk_view = views_get_view('safety_keys');
  $block_display = $sk_view->execute_display('directory_search_block', array($variables['node']->title));
  if (!empty($block_display)) {
    $variables['safety_keys_block'] = $block_display['content'];//views_embed_view('safety_keys', 'directory_search_block', $variables['node']->title);
  }

}

function worksafe_preprocess_page_node_company(&$variables) {
  drupal_set_title('Company Details');
}


/**
 * Theme a feed link.
 *
 * This theme function uses the theme pattern system to allow it to be
 * overidden in a more specific manner. The options for overiding this include
 * providing per display id; per type; per display id and per type.
 *
 * e.g.
 * For the view "export_test" with the display "page_1" and the type "csv" you
 * would have the following options.
 *   views_data_export_feed_icon__export_test__page_1__csv
 *   views_data_export_feed_icon__export_test__page_1
 *   views_data_export_feed_icon__export_test__csv
 *   views_data_export_feed_icon__page_1__csv
 *   views_data_export_feed_icon__page_1
 *   views_data_export_feed_icon__csv
 *   views_data_export_feed_icon
 *
 * @ingroup themeable
 */
function worksafe_views_data_export_feed_icon($variables) {
  extract($variables, EXTR_SKIP);
  $url_options = array('html' => TRUE);
  if ($query) {
    $url_options['query'] = $query;
  }
  if ($variables['url'] == 'directory/export') {
    $image = t('Export');
  } else {
    $image = theme('image', array('path' => $image_path, 'alt' => $text, 'title' => $text));
  }
  return l($image, $url, $url_options);
}
